package com.cropstest;

import com.crops.controller.CropController;
import com.crops.model.Crop;
import com.crops.service.CropServices;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

public class CropServiceControllerTestAdd {
	
	 @InjectMocks
	    private CropController cropController;

	    @Mock
	    private CropServices cropServices;
	    
	    private Crop mockCrop;

	    @BeforeEach
	    void setUp() {
	        MockitoAnnotations.openMocks(this);
	        // Create a mock Crop object with the specified constructor sequence
	        mockCrop = new Crop(1, "Wheat", 100, 250.50, 10, "Pending", null, null);
	    }
	 @Test
	    void testAddCrop() {
	        when(cropServices.addCrop(any())).thenReturn("Crop added successfully");

	        String result = cropController.addCrop(mockCrop);

	        verify(cropServices, times(1)).addCrop(mockCrop);
	        assertEquals("Crop added successfully", result);
	    }

	    @Test
	    void testUpdateCropById() {
	        when(cropServices.updateCrop(anyInt(), any())).thenReturn("Crop updated successfully");

	        String result = cropController.updateCrop(1, mockCrop);

	        verify(cropServices, times(1)).updateCrop(1, mockCrop);
	        assertEquals("Crop updated successfully", result);
	    }

	    @Test
	    void testUpdateCropByName() {
	        when(cropServices.updateCrop(anyString(), any())).thenReturn("Crop updated successfully");

	        String result = cropController.updateCrop("Wheat", mockCrop);

	        verify(cropServices, times(1)).updateCrop("Wheat", mockCrop);
	        assertEquals("Crop updated successfully", result);
	    }
}
