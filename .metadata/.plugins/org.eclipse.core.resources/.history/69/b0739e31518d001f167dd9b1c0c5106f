package com.FarmerService.services;

import java.net.URI;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.FarmerService.exceptions.FarmerNotFoundException;
import com.FarmerService.models.Crop;
import com.FarmerService.models.Farmer;
import com.FarmerService.repository.FarmerRepository;
import com.farmers.exception.FarmerAlreadyExistsException;

import jakarta.validation.Valid;

@Service
public class FarmerServicesImpl implements FarmerServices{

	@Autowired
	FarmerRepository repo;
	
	@Autowired
	RestTemplate restTemplate;
	
	final String ROOT_URI = "http://localhost:8083/add";
	final String ROOT_URI2 = "http://localhost:8083/crops";
	final String ROOT_URI3 = "http://localhost:8083/delete/{id}";

	public List<Farmer> getFarmer() {

		return repo.findAll();
	}

	public Optional<Farmer> getFarmer(int id) {

		Optional<Farmer> farmer = repo.findById(id);

		if (farmer.isEmpty()) {
			throw new FarmerNotFoundException("Farmer with ID: " + id + " is not present in database...!");
		}

		return farmer;
	}

	public String addFarmer(@Valid Farmer farmer) {

		List<Farmer> farmersList = repo.findAll();

		for (Farmer temp : farmersList) {
			if (temp.getFarmerId() == farmer.getFarmerId()) {
				throw new FarmerAlreadyExistsException(
						"Farmer with ID: " + farmer.getFarmerId() + " is already present in database...!");
			}
		}

		repo.save(farmer);
		return "Farmer added successfully...!";
	}

	public String updateFarmer(@Valid int id, @Valid Farmer updatedFarmer) {

		Optional<Farmer> farmer = repo.findById(id);
		if (farmer.isEmpty()) {
			throw new FarmerNotFoundException("Farmer with ID: " + id + " is not present in database...!");
		}

		repo.save(updatedFarmer);
		return "Farmer updated successfully...!";
	}

	public String deleteFarmer(int id) {

		Optional<Farmer> farmer = repo.findById(id);

		if (farmer.isEmpty()) {
			throw new FarmerNotFoundException("Farmer with ID: " + id + " is not present in database...!");
		}

		repo.deleteById(id);
		return "Farmer removed from the database....!";
	}

	public String deleteFarmer() {

		repo.deleteAll();
		return "All farmers are removed from database...!";
	}

	
	
//	For crops 
	public URI addCrop(Crop crop) {	
		
		int fId = crop.getFarmerId();
 		
		Optional<Farmer> farmer = repo.findById(fId);
		
		if(farmer.isEmpty()) {
			throw new FarmerNotFoundException("Farmer with ID: "+fId+" not found in database...!");
		}
		return  restTemplate.postForLocation(ROOT_URI, crop);
	}

	public List<Crop> getAllCrops() {
		
		ResponseEntity<Crop[]> response = restTemplate.getForEntity(ROOT_URI2, Crop[].class);
		System.out.println(response);
		return Arrays.asList(response.getBody());		 
	}
	
	
	public void deleteCrop(int id) {
		restTemplate.delete(ROOT_URI3+ "/"+id);
	}
	
	
	
	
	
}
