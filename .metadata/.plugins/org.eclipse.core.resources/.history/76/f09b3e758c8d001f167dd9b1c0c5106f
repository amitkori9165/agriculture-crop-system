package com.farmers.service;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.farmers.exception.CropNotFoundException;
import com.farmers.exception.FarmerNotFoundException;
import com.farmers.model.Crop;

import jakarta.validation.Valid;

@Service
public class FarmersCropServices {

	@Autowired
	FarmerServicesImpl services;
	@Autowired
	RestTemplate restTemplate;

	final String ROOT_URI = "http://localhost:8080/crops";

	public List<Crop> getCrops() {
		Crop[] cropsArr = restTemplate.getForEntity(ROOT_URI + "/" + "showAllCrops", Crop[].class).getBody();
		return Arrays.asList(cropsArr);
	}

//	public Optional<Crop> getCrops(@Valid String name) {
//		
////		Optional<Crop> crop = repo.getCropByName(name);
////		if(crop.isEmpty()) {
////			throw new CropNotFoundException("Crop : " + name + " not found in database...!");
////		}
////		return crop;
//		return null;
//	}
//	
//	public List<Crop> getCropsByQuantity(@Valid int quantity){
//		
////		List<Crop> cropsList = repo.getCropsByQuantity(quantity);
////		if(cropsList.isEmpty()) {
////			throw new CropNotFoundException("Crops not found is specified quantity...!");
////		}
////		return cropsList;
//		return null;
//	}
//	
//
	public String updateCrop( int farmerId, Crop updatedCrop) {
//		System.out.println("Message....");
//		System.out.println(updatedCrop.getCropId());

		Crop[] cropsArr = restTemplate.getForEntity(ROOT_URI + "/" + "showAllCrops", Crop[].class).getBody();

//		return null;
		List<Crop> cropsList = Arrays.asList(cropsArr);
		for(Crop c:cropsList) {
			
			if(c.getFarmerId() == farmerId) {
//				restTemplate.postForLocation(ROOT_URI+"/"+"updateCropsById"+"/"+c.getCropId(), updatedCrop);
				restTemplate.put(ROOT_URI+"/"+"updateCropsById"+"/"+c.getCropId(), updatedCrop);
				return "Crop updated successfully...!";
			}
		}
		throw new FarmerNotFoundException("No crop found for farmer ID: "+farmerId+" in database...!");
		
		
//		cropsList.stream().filter((obj)-> obj.getFarmerId())
	}
//
//	public String delete(@Valid String name) {
//		
////		List<Crop> cropList = repo.findAll();
////		for(Crop c:cropList) {
////			if(c.getCropName().equalsIgnoreCase(name)) {
////				 repo.deleteById(c.getCropId());
////				 return "Crop deleted successfully...!";
////			}
////		}
////		
////		throw new CropNotFoundException("Crop : " + name + " not found in database...!");
//		Optional<Crop> crop = repo.getCropByName(name);
//		if(crop.isEmpty()) {
//			throw new CropNotFoundException("Crop : " + name + " not found in database...!");
//		}
//		repo.deleteCropByName(name);
//		return "Crop deleted successfully...!";
//	}
//
//	public String delete() {	 
//		 repo.deleteAll();
//		 return "All crops removed from database...!";
//	}
//
//	public Crop getCrops(@Valid int id) {
//		 
//		Optional<Crop> crop = repo.findById(id);
//		if(crop.isEmpty()) {
//			throw new CropNotFoundException("Crop with ID: "+id+" not found in database...!");
//		}
//		return null;
//	}
//
//	public String updateCrop(@Valid int id, @Valid Crop updatedCrop) {
//		 
//		Optional<Crop> crop = repo.findById(id);
//		if(crop.isEmpty()) {
//			throw new CropNotFoundException("Crop with ID: "+id+" not found in database...!");
//		}
//		repo.save(updatedCrop);
//		return "Crop updated successfully...!";
//	}
//
//	public String delete(@Valid int id) {	
//		Optional<Crop> crop = repo.findById(id);
//		if(crop.isEmpty()) {
//			throw new CropNotFoundException("Crop with ID: "+id+" not found in database...!");
//		}
//		repo.deleteById(id);
//		return "Crop deleted successfully...!";
//	}
//	
////	For crops 
//	public URI addCrop(Crop crop) {	
//		
//		int fId = crop.getFarmerId();
// 		
//		Optional<Farmer> farmer = repo.findById(fId);
//		
//		if(farmer.isEmpty()) {
//			throw new FarmerNotFoundException("Farmer with ID: "+fId+" not found in database...!");
//		}
//		return  restTemplate.postForLocation(ROOT_URI, crop);
//	}
//
//	public List<Crop> getAllCrops() {
//		
//		ResponseEntity<Crop[]> response = restTemplate.getForEntity(ROOT_URI2, Crop[].class);
//		System.out.println(response);
//		return Arrays.asList(response.getBody());		 
//	}
//	
//	
//	public void deleteCrop(int id) {
//		restTemplate.delete(ROOT_URI+ "/"+id);
//	}

	public String delete(@Valid int cropId) {
		
		Crop[] cropsArr = restTemplate.getForEntity(ROOT_URI + "/" + "showAllCrops", Crop[].class).getBody();

		List<Crop> cropsList = Arrays.asList(cropsArr);
		
		for(Crop crop:cropsList) {
			if(crop.getCropId() == cropId) {
				restTemplate.delete(ROOT_URI +"/"+"deleteCropsById"+"/"+cropId);
				return "Crop deleted Successfully...!";
			}
		}
		throw new CropNotFoundException("Crop with ID: "+cropId+" not found in database...!");
	}
}
