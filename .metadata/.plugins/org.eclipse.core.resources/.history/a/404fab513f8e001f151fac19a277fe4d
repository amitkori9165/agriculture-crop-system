package com.dealers.service;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.dealers.exception.BookingNotFoundException;
import com.dealers.exception.DealerNotFoundException;
import com.dealers.model.Dealer;
import com.dealers.model.DealersBooking;
import com.dealers.model.DealersCrop;
import com.dealers.repository.DealerRepository;

import jakarta.validation.Valid;

@Service
public class DealersBookingServices {
	
	
	@Autowired 
	DealerRepository repo;
	
	@Autowired
	DealersCropServices cropService;
	
	@Autowired
	RestTemplate restTemplate;
	
	final String ROOT_URI = "http://localhost:8080/bookings";
	final String ROOT_URI2 = "http://localhost:8080/crops";
	final String ROOT_URI3 = "http://localhost:8080/farmers";

	public List<DealersBooking> getBookings(@Valid int dealerId) {
		
		Optional<Dealer> dealer = repo.findById(dealerId);
		if(dealer.isEmpty()) {
			throw new DealerNotFoundException("Dealer with ID: "+dealerId+" not found in database...!");
		}
		
		DealersBooking[] totalBookingArr = restTemplate.getForEntity(ROOT_URI+"/showAllBookings", DealersBooking[].class).getBody();
		List<DealersBooking> totalBookingList = Arrays.asList(totalBookingArr);
		
		List<DealersBooking> bookingList = totalBookingList.stream().filter(obj1 -> obj1.getDealerId()==dealerId).toList();
		
		if(bookingList.isEmpty()) {
			throw new BookingNotFoundException("No bookings found for provided dealer ID: "+dealerId);
		}
		return bookingList;	
	}
	
	
	public String addBooking(@Valid DealersBooking booking) {
//		booking_id | booking_status | crop_id | dealer_id | farmer_id | total_amount
		
//		restTemplate.getForEntity(ROOT_URI, null)
		List<DealersCrop> cropList = cropService.getCrops();
		
		for(DealersCrop crop:cropList) {
			
			if(crop.getFarmerId() == booking.getFarmerId() && crop.getCropId() == booking.getCropId()) {
				restTemplate.postForLocation(ROOT_URI +"/addCrops", booking); 
				
//				updating the crop status from unsold to booked
				int cropId = booking.getCropId();
				crop.setCropStatus("BOOKED");
				
				restTemplate.put(ROOT_URI + "/updateCropsById/" + cropId, crop);
				return "Booking confirm...!";
			}
		}
		throw new RuntimeException("Invalid booking details...!");
		
		
		
		
		
		
		
		
//		repo.save(booking);
		
//		agar kisi crop ki booking ho rakhi h to usko dobara book nhi karenge
		
//		List<Booking>allBookings = repo.findAll();
//		
//		for(Booking b:allBookings) {
//			
//			if(b.getCropId() == booking.getCropId()) {
//				throw new BookingAlreadyExistsException("Booking for crop ID: "+booking.getCropId()+" already present in database...!");
//			}
//		}
//		
//  		repo.save(booking);
//  		return "Booking confirm...!";
	}
}
